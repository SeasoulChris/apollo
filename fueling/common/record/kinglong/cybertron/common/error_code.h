/******************************************************************************
 * Copyright 2017 The Apollo Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *****************************************************************************/

#pragma once

//#define DRIVER_ERROR 031 
enum DriverError {
    // lidar
    LIDAR_CONF_LOAD_ERR = 101,
    LIDAR_CONF_PARSE_ERR = 102,
    LIDAR_INNER_PARAM_ERR = 103,
    LIDAR_DEV_CONF_ERR = 104,
    LIDAR_DEV_CONN_ERR = 105,
    LIDAR_DEV_START_ERR = 106,
    LIDAR_DEV_READ_ERR = 107,
    LIDAR_DEV_PARSE_ERR = 108,
    LIDAR_DATA_READ_TIMEOUT = 109,
    LIDAR_DATA_FORMAT_ERR = 110,
    LIDAR_INIT_ERR = 111,
    LIDAR_DEV_POLL_ERR = 112,
    LIDAR_GPS_STATUS_CHK_ERR = 113,
    LIDAR_SCAN_MSG_ERR = 114,
    LIDAR_CREATE_PARSER_ERR = 115,
    LIDAR_PC_NULL_ERR = 116,
    LIDAR_CALIBRATION_OPEN_ERR = 117,
    LIDAR_GPS_TIME_ERR = 118,
    LIDAR_SOCK_DUMP_FILE_ERR = 119,
    LIDAR_SCOK_INIT_ERR = 120,
    LIDAR_SOCK_BIND_ERR = 121,
    LIDAR_SOCK_NON_BLOCK_ERR = 122,
    // camera
    CAME_CONF_PARSE_ERR = 201,
    CAME_INNER_PARAM_ERR = 202,
    CAME_SAMPLE_FORMAT_ERR = 203,
    CAME_MJPEG_DECODER_INIT_ERR = 204,
    CAME_DEV_RECOGNIZE_ERR = 205,
    CAME_DEV_OPEN_ERR = 206,
    CAME_DEV_INIT_ERR = 207,
    CAME_DEV_IO_CONTROL_ERR = 208,
    CAME_DEV_V4L_SET_ERR = 209,
    CAME_DEV_START_ERR = 210,
    CAME_DEV_UNSUPPORT_IO_ERR = 211, 
    CAME_NO_MEMORY_ERR = 212,
    CAME_DEV_READ_TIMEOUT = 213,
    CAME_MEMORY_MAP_ERR = 214,
    CAME_DEV_BUFF_ERR = 215,
    CAME_DEV_READ_ERR = 216,
    CAME_DEV_CLOSE_ERR = 217,
    CAME_MJPEG_2_RGB_ERR = 218,
    CAME_COMPRESS_ERR = 219,
    CAME_PRO_IMAGE_ERR = 220,
    CAME_SMT_EYE_SDK_ERR = 221,
    //radar 
    RADAR_CONF_LOAD_ERR = 301,
    RADAR_CONF_PARSE_ERR = 302,
    RADAR_INNER_PARAM_ERR = 303,
    RADAR_DEV_CONN_ERR = 304,
    RADAR_DEV_INIT_ERR = 305,
    RADAR_DEV_START_ERR = 306,
    RADAR_DEV_READ_ERR = 307,
    RADAR_DATA_READ_TIMEOUT = 308,
    RADAR_RECV_DATA_ERR = 309,
    RADAR_CAN_CONN_ERR = 310,
    RADAR_INIT_CAN_ERR = 311,
    RADAR_CAN_OPEN_ERR = 312,
    RADAR_CAN_CLOSE_ERR = 313,
    //gnss
    GNSS_CONF_LOAD_ERR = 401,
    GNSS_CONF_PARSE_ERR = 402,
    GNSS_CREATE_DATA_PARSER_ERR = 403,
    GNSS_CREATE_RTCM_PARSER_ERR = 404,
    GNSS_CRC_CHECK_ERR = 405,
    GNSS_MEM_ALLOC_ERR = 406,
    GNSS_MSG_LEN_ERR = 407,
    GNSS_GPSEPHEMERIS_MSG_LEN_ERR = 408,
    GNSS_IMU_DELAY = 409,
    GNSS_IMU_ERR = 410,
    GNSS_SOCK_CREATE_ERR = 411,
    GNSS_SOCK_INIT_ERR = 412,
    GNSS_SOCK_CONN_ERR = 413,
    GNSS_SOCK_READ_ERR = 414,
    GNSS_ROMOTE_CLOSE_ERR = 415,
    GNSS_TCP_DATA_TIMEOUT_ERR = 416,
    GNSS_UNSUPPORT_DATUM_ERR = 417,
    GNSS_CHECKSUM_ERR = 418,
    GNSS_ESF_INS_MSG_ERR = 419,
    GNSS_TCP_CONN_ERR = 420,
    GNSS_NTRIP_ERR = 421,
    GNSS_CREATE_STREAM_ERR = 422,
    GNSS_RAW_STREAM_INIT_ERR = 423,
    GNSS_CONN_ERR = 424,
    GNS_LOGIN_ERR = 425,        
    GNSS_DISCONN_ERR = 426,     
    GNSS_UNEXPECT_RTK_BYTE_ERR = 427,
    GNSS_SSTREAM_DEV_OPEN_ERR = 428,
    GNSS_SSTREAM_SET_PARAM_ERR = 429,
    GNSS_SSTREAM_WRITE_ERR = 430,
    GNSS_SSTREAM_DOUBLE_RM_ERR = 431,
    GNSS_SSTREAM_READ_DATA_ERR = 432,
    GNSS_SSTREAM_WRITE_DATA_ERR = 433,
    GNSS_UNKNOWN_MSG_TYPE = 434,
    GNSS_GSTREAM_OPEN_ERR = 435,
    GNSS_SET_SOCK_ADDR_ERR = 436,
    GNSS_SOCK_BIND_ERR = 437,
    GNSS_UDP_SEND_ERR = 438,
    //JOY
    JOY_DEV_POLL_ERR = 501,
    JOY_DEV_OPEN_ERR = 502,
    JOY_DEV_CLOSE_ERR = 503
};

//#define CYBERTRON_ERROR 041
enum CybertronError {
  //common
  NEW_MEMORY_ERROR = 100,
  GFLAG_GET_FILE_LIST_ERROR = 101,
  GFLAG_FILE_OPEN_ERROR = 102,
  GFLAG_FILE_READ_ERROR = 103,
  CONF_GET_FILE_LIST_ERROR = 104,
  CONF_FILE_OPEN_ERROR = 105,
  CONF_FILE_LOAD_ERROR = 106,
  CONFIG_GET_FILE_LIST_ERROR = 107,
  CONFIG_FILE_PARSE_ERROR = 108,
  PROTOBUF_REGISTER_MSG_ERROR = 109,
  PROTOBUF_GET_DESC_ERROR = 110,
  PROTOBUF_GENERATE_MSG_ERROR = 111,
  PROTOBUF_PARSE_STR_ERROR,
  PROTOBUF_BUILD_MSG_ERROR,
  GLOBAL_MSGTYPE_CONFLICT_ERROR,
  MSGTYPE_NOT_SUPPORTED_ERROR,
  MSGTYPE_EMPTY_ERROR,
  THREAD_RUN_EXCEPTION_ERROR,
  CLASS_REGISTER_ERROR,
  GET_CLASS_INSTANCE_ERROR,
  //dag_streaming
  COMPONENT_INIT_ERROR = 150,
  COMPONENT_PROC_ERROR,
  SENDER_INIT_ERROR,
  NO_SENDER_ERROR,
  SENDER_EMPTY_CHANNEL_ERROR,
  RECEIVER_INIT_ERROR,
  RECEIVER_SIZE_ERROR,
  DATA_FUSION_INIT_ERROR,
  CREATE_READER_ERROR,
  CREATE_WRITER_ERROR,
  PARSE_ARGUMENT_ERROR,
  INVALID_ARGUMENT_ERROR,
  DAG_FILE_LOAD_ERROR,
  DAG_FILE_PARSE_ERROR,
  DAG_INIT_COMP_ERROR,
  CLASS_LOADER_INIT_ERROR,
  LIBRARY_NOT_EXIST_ERROR,
  CLASS_LOADER_LOAD_ERROR,
  COMPONENT_REPEAT_ERROR,
  COMPONENT_CREATE_INST_ERROR,
  COMPONENT_SET_AFFINITY_ERROR,
  COMPONENT_GET_CONFIG_ERROR,
  CREATE_NODE_ERROR,
  SAME_NODE_ERROR,
  CREATE_SERVICE_ERROR,
  CREATE_CLIENT_ERROR,
  DAG_LOAD_MODULE_ERROR,
  DAG_INIT_CONF_ERROR,
  MODULE_LOAD_ALL_ERROR,
  MODULE_LOAD_LIST_ERROR,
  MODULE_UNKNOWN_CMD_ERROR,
  MODULE_MGR_HANDLER_ERROR,
  MODULE_SEND_REQ_ERROR,
  MODULE_RESP_ERROR,
  //middleware
  INTRA_MSG_SERIALIZE_ERROR = 200,
  RTPS_MSG_SERIALIZE_ERROR,
  SHM_MSG_SERIALIZE_ERROR,
  SOCKET_MSG_SERIALIZE_ERROR,
  INTRA_PARSE_STR_ERROR,
  RTPS_PARSE_STR_ERROR,
  SHM_PARSE_STR_ERROR,
  SOCKET_PARSE_STR_ERROR,
  /* writer */
  INTRA_WRITER_INIT_ERROR = 220,
  RTPS_WRITER_INIT_ERROR,
  SHM_WRITER_INIT_ERROR,
  SOCKET_WRITER_INIT_ERROR,
  UNSUPPORT_TRANSPORT_ERROR,
  INTRA_CREATE_MSG_ERROR,
  RTPS_DESTROY_ERROR,
  RTPS_CREATE_PUB_ERROR,
  RTPS_MSG_NULL_ERROR,
  RTPS_SET_PUB_QOS_ERROR,
  RTPS_SET_HISTORY_DEPTH_ERROR,
  RTPS_UNKNOWN_QOS_ERROR,
  SHM_INIT_ERROR,
  SHM_CREATE_SEGMENT_ERROR,
  SHM_INIT_BLOCKS_ERROR,
  SHM_MAP_BLOCKS_ERROR,
  SHM_PUB_MSG_ERROR,
  SHM_NULL_MSG_ERROR,
  SOCKET_NULL_MSG_ERROR,
  CHANNEL_FILTER_CREATE_NODE_ERROR,
  CHANNEL_FILTER_CHANNEL_CREATE_ERROR,
  /* reader */
  INTRA_READER_INIT_ERROR = 250,
  RTPS_READER_INIT_ERROR,
  SHM_READER_INIT_ERROR,
  SOCKET_READER_INIT_ERROR,
  RTPS_CREATE_SUB_ERROR,
  RTPS_SET_SUB_QOS_ERROR,
  SHM_PUBLISH_MSG_ERROR,
  SIGNAL_CONNECT_SLOT_ERROR,
  //topology
  UNKNOWN_OPT_TYPE_ERROR = 270,
  HOST_NAME_EMPTY_ERROR,
  UNKNOWN_CHANNEL_NAME_ERROR,
  ENV_DOMAIN_ID_ERROR,
  ENV_CYBER_IP_ERROR,
  CREATE_PARTICIPANT_ERROR,
  CREATE_PUBLISHER_ERROR,
  CREATE_SUBSCRIBER_ERROR,
  PARTICIPANT_REGISTER_ERROR,
  CALLBACK_RUN_ERROR,
  NOTIFIER_REGISTER_CALLBACK_ERROR,
  NOTIFIER_PARSE_STR_ERROR,
  NOTIFIER_SERIALIZE_ERROR,
  TOPO_UNKNOWN_TYPE_ERROR,
  EMPTY_HOST_PID_ERROR,
  CHANNEL_NOT_EXIST_ERROR,
  SERVICE_DUPLICATE_ERROR,
  //node/service
  NODE_CREATE_READER_ERROR = 300,
  NODE_CREATE_RTPS_READER_ERROR,
  NODE_SET_PARAM_ERROR,
  NODE_GET_PARAM_ERROR,
  SERVICE_CREATE_RESP_ERROR,
  SERVICE_CREATE_REQ_ERROR,
  CYBERTRON_INIT_ERROR,
  CYBERTRON_START_ERROR,
  DAG_INSTANCE_ERROR,
  METRIC_MGR_INSTANCE_ERROR,
  METRIC_CTL_INSTANCE_ERROR,
  SIMTIME_READER_INSTANCE_ERROR,
  SIMTIME_WRITER_INSTANCE_ERROR,
  TIME_MGR_INSTANCE_ERROR,
  GLOBAL_DATA_INSTANCE_ERROR,
  GFLAG_MGR_INSTANCE_ERROR,
  CONFIG_MGR_INSTANCE_ERROR,
  CONF_MGR_INSTANCE_ERROR,
  COMPONENT_MGR_INSTANCE_ERROR,
  POLL_MGR_INSTANCE_ERROR,
  COMPONENT_INSTANCE_ERROR,
  INTRA_READER_MGR_INSTANCE_ERROR,
  RTPS_READER_MGR_INSTANCE_ERROR,
  SHM_READER_MGR_INSTANCE_ERROR,
  SOCKET_READER_MGR_INSTANCE_ERROR,
  TOPOLOGY_INSTANCE_ERROR,
  SCHEDULER_INSTANCE_ERROR,
  SYNCHRO_MGR_INSTANCE_ERROR,
  COORDINATOR_INSTANCE_ERROR,
  EXIT_HANDLER_ERROR,
  SYNCHRO_MGR_SYNC_ERROR,
  SIM_WRITER_INIT_ERROR,
  SIM_READER_INIT_ERROR,
  SIM_NOT_INIT_ERROR,
  SIM_CREATE_NODE_ERROR,
  SIM_CREATE_WRITER_ERROR,
  SIM_CREATE_READER_ERROR,
  //scheduler
  TASK_RUN_ERROR = 350,
  SET_SCHED_PARAM_ERROR,
  SET_AFFINITY_ERROR,
  CREATE_STRATEGY_ERROR,
  PARSE_SCHED_CONF_ERROR,
  TASK_MGR_INIT_ERROR,
  SCHED_TASK_NULL_ERROR,
  //tf2 (TODO)
  NO_MATCH_TIME_ERROR = 400,
  TARGET_TIME_ADVANCE_ERROR,
  TARGET_TIME_EXPIRED_ERROR,
  TF_SELF_TRANSFORM_ERROR,
  TF_NO_CHILD_FRAME_ID_ERROR,
  TF_NO_FRAME_ID_ERROR,
  TF_NAN_INPUT_ERROR,
  TF_DENORMALIZED_QUATERNION_ERROR,
  TF_UNKNOWN_CODE_ERROR,
  //metric/stat
  METRIC_CTL_INIT_ERROR = 450,
  METRIC_CREATE_NODE_ERROR,
  METRIC_CREATE_WRITER_ERROR,
  METRIC_CREATE_SERVICE_ERROR,
  METASTAT_CREATE_NODE_ERROR,
  METASTAT_CREATE_WRITER_ERROR,
  METASTAT_LOAD_CONF_ERROR,
  METASTAT_PARSE_CONF_ERROR,
  //data_fusion
  UNKNOWN_FUSION_NAME_ERROR = 500,
  GET_PROTO_DESCRIPTOR_ERROR,
  GET_PROTO_REFLECTION_ERROR,
  SENSOR_TIME_NULL_ERROR,
  //parameter
  PARAM_CREATE_CLIENT_ERROR = 550,
  PARAM_CLIENT_REQ_ERROR, 
  PARAM_WRITE_EVENT_ERROR, 
  PARAM_RECOVERY_SNAPSHOT_ERROR,
  PARAM_REMOVE_SERVICE_ERROR,
  PARAM_INVALID_TYPE,
  PARAM_WRONG_TYPE_ERROR,
  // simulator 
  START_ENGINE_ERROR = 600,
  SYNC_POINT_FINISH_ERROR,
  LOGSIM_RECORD_FILE_ERROR,
  LOGSIM_CHANNEL_NULL_ERROR,
  RULE_MGR_INIT_ERROR,
  READ_CONF_ERROR,
  REGISTER_SYNC_CHAT_ERROR,
  GEN_STATE_FROM_LOG_ERROR,
  GEN_STATE_FROM_RULE_ERROR,
  GET_PRE_CHANNEL_ERROR,
  DEPEND_CHANNEL_MORE_ERROR,
  SET_SIM_TIME_ERROR,
  OPEN_REORD_ERROR,
  GET_PRE_PERIOD_ERROR,
  SYNC_INIT_ERROR,
  SYNC_CREATE_NODE_ERROR,
  SYNC_CREATE_WRITER_ERROR,
  SYNC_CREATE_READER_ERROR,
  SYNC_WRITE_READY_ERROR,
  COORD_INIT_ERROR,
  COORD_CREATE_NODE_ERROR,
  COORD_CREATE_WRITER_ERROR,
  COORD_CREATE_READER_ERROR,
  COORD_NOT_FOUND_ERROR,
  COORD_WRITE_ERROR,
  RULE_MGR_LOAD_CONF_ERROR,
  RULE_MGR_PARSE_CONF_ERROR,
  FIND_CHANNEL_ERROR,
  FIND_DEPEND_CHANNEL_ERROR,

  //tools
  NODE_ARGUMENT_PARSE_ERROR = 900,
  CHANNEL_ARGUMENT_PARSE_ERROR,
  SERVICE_ARGUMENT_PARSE_ERROR,
  RECORD_ARGUMENT_PARSE_ERROR,
  PARAM_ARGUMENT_PARSE_ERROR,
  RECORDER_INIT_ERROR,
  RECODR_REINDEX_INIT_ERROR,
  RECORD_UNKNOWN_CMD_ERROR,
  RECOVERY_SNAPSHOT_SERVICE_ERROR,
  RECOVERY_SNAPSHOT_RESP_ERROR,
  RECORD_MSG_NULL_ERROR,
  FILE_NOT_OPEN_ERROR,
  REPEATED_FILE_ERROR,
  RECORD_FILE_OPEN_ERROR,
  RECORD_FILE_READ_ERROR,
  RECORD_PARSE_STR_ERROR,
  RECORD_SERIALIZE_STR_ERROR,
  RECORD_INVALID_MSG_TYPE_ERROR,
  FLUSH_THREAD_INIT_ERROR,
  FILE_NOT_EXIST_ERROR,
  FILE_FORMAT_ERROR,
  FILE_STREAM_INIT_ERROR,
  READ_HEADER_ERROR,
  READ_INDEX_ERROR,
  READ_CHUNK_ERROR,
  CHUNK_INDEX_ERROR,
  HEADER_LENGHT_ERROR,
  WRITE_HEADER_ERROR,
  WRITE_EXCEPTION_ERROR,
  WRITE_CHUNK_ERROR,
  BZ2_COMPRESS_ERROR,
  BZ2_COMPRESS_CAPACITY_ERROR,
  BZ2_DECOMPRESS_ERROR,
  BZ2_DECOMPRESS_CAPACITY_ERROR,
  BZ2_DECOMPRESS_RAWDATA_ERROR,
  LZ4_COMPRESS_ERROR,
  LZ4_DECOMPRESS_ERROR,
  LZ4_DECOMPRESS_CAPACITY_ERROR,
  PLAY_CREATE_NODE_ERROR,
  PLAY_SORT_FILES_ERROR,
  PLAY_INIT_ERROR,
  PLAY_INIT_FILE_ERROR,
  PLAY_INIT_WRITER_ERROR,
  PLAY_INIT_LOADER_ERROR,
  PLAY_FILE_MD5_ERROR,
  PLAY_FILES_TIME_ERROR,
  PLAY_TIME_PARAM_ERROR,
  PLAY_LOAD_CHUNK_ERROR,
  PLAY_SIM_WRITE_ERROR,
  PLAY_WRITER_NULL_ERROR,
  PLAY_WRITE_MSG_ERROR,
  INFO_FILE_EMPTY_ERROR,
  SPLIT_PARAM_ERROR,
  SPLIT_PROC_ERROR,
  RECORD_CREATE_NODE_ERROR,
  RECORD_INIT_READER_ERROR,
  RECORD_MSG_TIME_ERROR,
  // reserve
  CYBERTRON_MAX_ERROR = 999
};

//#define RECORDER_ERROR 035
enum RecorderError {
  //Nvme error
  DISK_WRITE_ERR = 101,
};
