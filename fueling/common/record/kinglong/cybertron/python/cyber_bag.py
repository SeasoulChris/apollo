# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
import os
import sys
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    import importlib
    sys.path.append(os.path.abspath(os.path.dirname(__file__)))
    _cyber_bag = importlib.import_module('_cyber_bag')
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cyber_bag', [dirname(__file__)])
        except ImportError:
            import _cyber_bag
            return _cyber_bag
        try:
            _mod = imp.load_module('_cyber_bag', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cyber_bag = swig_import_helper()
    del swig_import_helper
else:
    import _cyber_bag
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SHARED_PTR_DISOWN = _cyber_bag.SHARED_PTR_DISOWN


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    def __setattr__(self, name, value): return _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cyber_bag.delete_SwigPyIterator
    def __del__(self): return None

    def value(self):
        return _cyber_bag.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cyber_bag.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cyber_bag.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cyber_bag.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cyber_bag.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cyber_bag.SwigPyIterator_copy(self)

    def next(self):
        return _cyber_bag.SwigPyIterator_next(self)

    def __next__(self):
        return _cyber_bag.SwigPyIterator___next__(self)

    def previous(self):
        return _cyber_bag.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cyber_bag.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cyber_bag.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cyber_bag.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cyber_bag.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cyber_bag.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cyber_bag.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cyber_bag.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self


SwigPyIterator_swigregister = _cyber_bag.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


class IntVector(_object):
    __swig_setmethods__ = {}
    def __setattr__(self, name, value): return _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cyber_bag.IntVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cyber_bag.IntVector___nonzero__(self)

    def __bool__(self):
        return _cyber_bag.IntVector___bool__(self)

    def __len__(self):
        return _cyber_bag.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _cyber_bag.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cyber_bag.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cyber_bag.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cyber_bag.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cyber_bag.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cyber_bag.IntVector___setitem__(self, *args)

    def pop(self):
        return _cyber_bag.IntVector_pop(self)

    def append(self, x):
        return _cyber_bag.IntVector_append(self, x)

    def empty(self):
        return _cyber_bag.IntVector_empty(self)

    def size(self):
        return _cyber_bag.IntVector_size(self)

    def swap(self, v):
        return _cyber_bag.IntVector_swap(self, v)

    def begin(self):
        return _cyber_bag.IntVector_begin(self)

    def end(self):
        return _cyber_bag.IntVector_end(self)

    def rbegin(self):
        return _cyber_bag.IntVector_rbegin(self)

    def rend(self):
        return _cyber_bag.IntVector_rend(self)

    def clear(self):
        return _cyber_bag.IntVector_clear(self)

    def get_allocator(self):
        return _cyber_bag.IntVector_get_allocator(self)

    def pop_back(self):
        return _cyber_bag.IntVector_pop_back(self)

    def erase(self, *args):
        return _cyber_bag.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _cyber_bag.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _cyber_bag.IntVector_push_back(self, x)

    def front(self):
        return _cyber_bag.IntVector_front(self)

    def back(self):
        return _cyber_bag.IntVector_back(self)

    def assign(self, n, x):
        return _cyber_bag.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _cyber_bag.IntVector_resize(self, *args)

    def insert(self, *args):
        return _cyber_bag.IntVector_insert(self, *args)

    def reserve(self, n):
        return _cyber_bag.IntVector_reserve(self, n)

    def capacity(self):
        return _cyber_bag.IntVector_capacity(self)
    __swig_destroy__ = _cyber_bag.delete_IntVector
    def __del__(self): return None


IntVector_swigregister = _cyber_bag.IntVector_swigregister
IntVector_swigregister(IntVector)


class DoubleVector(_object):
    __swig_setmethods__ = {}
    def __setattr__(self, name, value): return _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cyber_bag.DoubleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cyber_bag.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _cyber_bag.DoubleVector___bool__(self)

    def __len__(self):
        return _cyber_bag.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _cyber_bag.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cyber_bag.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cyber_bag.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cyber_bag.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cyber_bag.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cyber_bag.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _cyber_bag.DoubleVector_pop(self)

    def append(self, x):
        return _cyber_bag.DoubleVector_append(self, x)

    def empty(self):
        return _cyber_bag.DoubleVector_empty(self)

    def size(self):
        return _cyber_bag.DoubleVector_size(self)

    def swap(self, v):
        return _cyber_bag.DoubleVector_swap(self, v)

    def begin(self):
        return _cyber_bag.DoubleVector_begin(self)

    def end(self):
        return _cyber_bag.DoubleVector_end(self)

    def rbegin(self):
        return _cyber_bag.DoubleVector_rbegin(self)

    def rend(self):
        return _cyber_bag.DoubleVector_rend(self)

    def clear(self):
        return _cyber_bag.DoubleVector_clear(self)

    def get_allocator(self):
        return _cyber_bag.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _cyber_bag.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _cyber_bag.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _cyber_bag.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _cyber_bag.DoubleVector_push_back(self, x)

    def front(self):
        return _cyber_bag.DoubleVector_front(self)

    def back(self):
        return _cyber_bag.DoubleVector_back(self)

    def assign(self, n, x):
        return _cyber_bag.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _cyber_bag.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _cyber_bag.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _cyber_bag.DoubleVector_reserve(self, n)

    def capacity(self):
        return _cyber_bag.DoubleVector_capacity(self)
    __swig_destroy__ = _cyber_bag.delete_DoubleVector
    def __del__(self): return None


DoubleVector_swigregister = _cyber_bag.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)


class StringVector(_object):
    __swig_setmethods__ = {}
    def __setattr__(self, name, value): return _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cyber_bag.StringVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cyber_bag.StringVector___nonzero__(self)

    def __bool__(self):
        return _cyber_bag.StringVector___bool__(self)

    def __len__(self):
        return _cyber_bag.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _cyber_bag.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cyber_bag.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cyber_bag.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cyber_bag.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cyber_bag.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cyber_bag.StringVector___setitem__(self, *args)

    def pop(self):
        return _cyber_bag.StringVector_pop(self)

    def append(self, x):
        return _cyber_bag.StringVector_append(self, x)

    def empty(self):
        return _cyber_bag.StringVector_empty(self)

    def size(self):
        return _cyber_bag.StringVector_size(self)

    def swap(self, v):
        return _cyber_bag.StringVector_swap(self, v)

    def begin(self):
        return _cyber_bag.StringVector_begin(self)

    def end(self):
        return _cyber_bag.StringVector_end(self)

    def rbegin(self):
        return _cyber_bag.StringVector_rbegin(self)

    def rend(self):
        return _cyber_bag.StringVector_rend(self)

    def clear(self):
        return _cyber_bag.StringVector_clear(self)

    def get_allocator(self):
        return _cyber_bag.StringVector_get_allocator(self)

    def pop_back(self):
        return _cyber_bag.StringVector_pop_back(self)

    def erase(self, *args):
        return _cyber_bag.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _cyber_bag.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _cyber_bag.StringVector_push_back(self, x)

    def front(self):
        return _cyber_bag.StringVector_front(self)

    def back(self):
        return _cyber_bag.StringVector_back(self)

    def assign(self, n, x):
        return _cyber_bag.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _cyber_bag.StringVector_resize(self, *args)

    def insert(self, *args):
        return _cyber_bag.StringVector_insert(self, *args)

    def reserve(self, n):
        return _cyber_bag.StringVector_reserve(self, n)

    def capacity(self):
        return _cyber_bag.StringVector_capacity(self)
    __swig_destroy__ = _cyber_bag.delete_StringVector
    def __del__(self): return None


StringVector_swigregister = _cyber_bag.StringVector_swigregister
StringVector_swigregister(StringVector)


class ConstCharVector(_object):
    __swig_setmethods__ = {}
    def __setattr__(self, name, value): return _swig_setattr(self, ConstCharVector, name, value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, ConstCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cyber_bag.ConstCharVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cyber_bag.ConstCharVector___nonzero__(self)

    def __bool__(self):
        return _cyber_bag.ConstCharVector___bool__(self)

    def __len__(self):
        return _cyber_bag.ConstCharVector___len__(self)

    def __getslice__(self, i, j):
        return _cyber_bag.ConstCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cyber_bag.ConstCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cyber_bag.ConstCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cyber_bag.ConstCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cyber_bag.ConstCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cyber_bag.ConstCharVector___setitem__(self, *args)

    def pop(self):
        return _cyber_bag.ConstCharVector_pop(self)

    def append(self, x):
        return _cyber_bag.ConstCharVector_append(self, x)

    def empty(self):
        return _cyber_bag.ConstCharVector_empty(self)

    def size(self):
        return _cyber_bag.ConstCharVector_size(self)

    def swap(self, v):
        return _cyber_bag.ConstCharVector_swap(self, v)

    def begin(self):
        return _cyber_bag.ConstCharVector_begin(self)

    def end(self):
        return _cyber_bag.ConstCharVector_end(self)

    def rbegin(self):
        return _cyber_bag.ConstCharVector_rbegin(self)

    def rend(self):
        return _cyber_bag.ConstCharVector_rend(self)

    def clear(self):
        return _cyber_bag.ConstCharVector_clear(self)

    def get_allocator(self):
        return _cyber_bag.ConstCharVector_get_allocator(self)

    def pop_back(self):
        return _cyber_bag.ConstCharVector_pop_back(self)

    def erase(self, *args):
        return _cyber_bag.ConstCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _cyber_bag.new_ConstCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _cyber_bag.ConstCharVector_push_back(self, x)

    def front(self):
        return _cyber_bag.ConstCharVector_front(self)

    def back(self):
        return _cyber_bag.ConstCharVector_back(self)

    def assign(self, n, x):
        return _cyber_bag.ConstCharVector_assign(self, n, x)

    def resize(self, *args):
        return _cyber_bag.ConstCharVector_resize(self, *args)

    def insert(self, *args):
        return _cyber_bag.ConstCharVector_insert(self, *args)

    def reserve(self, n):
        return _cyber_bag.ConstCharVector_reserve(self, n)

    def capacity(self):
        return _cyber_bag.ConstCharVector_capacity(self)
    __swig_destroy__ = _cyber_bag.delete_ConstCharVector
    def __del__(self): return None


ConstCharVector_swigregister = _cyber_bag.ConstCharVector_swigregister
ConstCharVector_swigregister(ConstCharVector)


class bag_message(_object):
    __swig_setmethods__ = {}
    def __setattr__(self, name, value): return _swig_setattr(self, bag_message, name, value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, bag_message, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timestamp"] = _cyber_bag.bag_message_timestamp_set
    __swig_getmethods__["timestamp"] = _cyber_bag.bag_message_timestamp_get
    if _newclass:
        timestamp = _swig_property(
            _cyber_bag.bag_message_timestamp_get,
            _cyber_bag.bag_message_timestamp_set)
    __swig_setmethods__["topic"] = _cyber_bag.bag_message_topic_set
    __swig_getmethods__["topic"] = _cyber_bag.bag_message_topic_get
    if _newclass:
        topic = _swig_property(_cyber_bag.bag_message_topic_get, _cyber_bag.bag_message_topic_set)
    __swig_setmethods__["data"] = _cyber_bag.bag_message_data_set
    __swig_getmethods__["data"] = _cyber_bag.bag_message_data_get
    if _newclass:
        data = _swig_property(_cyber_bag.bag_message_data_get, _cyber_bag.bag_message_data_set)
    __swig_setmethods__["data_type"] = _cyber_bag.bag_message_data_type_set
    __swig_getmethods__["data_type"] = _cyber_bag.bag_message_data_type_get
    if _newclass:
        data_type = _swig_property(
            _cyber_bag.bag_message_data_type_get,
            _cyber_bag.bag_message_data_type_set)
    __swig_setmethods__["end"] = _cyber_bag.bag_message_end_set
    __swig_getmethods__["end"] = _cyber_bag.bag_message_end_get
    if _newclass:
        end = _swig_property(_cyber_bag.bag_message_end_get, _cyber_bag.bag_message_end_set)

    def __init__(self):
        this = _cyber_bag.new_bag_message()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cyber_bag.delete_bag_message
    def __del__(self): return None


bag_message_swigregister = _cyber_bag.bag_message_swigregister
bag_message_swigregister(bag_message)


class BagMessage(_object):
    __swig_setmethods__ = {}
    def __setattr__(self, name, value): return _swig_setattr(self, BagMessage, name, value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, BagMessage, name)
    __repr__ = _swig_repr

    def __init__(self, data):
        this = _cyber_bag.new_BagMessage(data)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["_msg"] = _cyber_bag.BagMessage__msg_set
    __swig_getmethods__["_msg"] = _cyber_bag.BagMessage__msg_get
    if _newclass:
        _msg = _swig_property(_cyber_bag.BagMessage__msg_get, _cyber_bag.BagMessage__msg_set)
    __swig_destroy__ = _cyber_bag.delete_BagMessage
    def __del__(self): return None


BagMessage_swigregister = _cyber_bag.BagMessage_swigregister
BagMessage_swigregister(BagMessage)


class PyBag(_object):
    __swig_setmethods__ = {}
    def __setattr__(self, name, value): return _swig_setattr(self, PyBag, name, value)
    __swig_getmethods__ = {}
    def __getattr__(self, name): return _swig_getattr(self, PyBag, name)
    __repr__ = _swig_repr

    def __init__(self, file_name, write_mode=False, if_dump_parameter_snapshot=False):
        this = _cyber_bag.new_PyBag(file_name, write_mode, if_dump_parameter_snapshot)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cyber_bag.delete_PyBag
    def __del__(self): return None

    def reset(self):
        return _cyber_bag.PyBag_reset(self)

    def is_valid(self):
        return _cyber_bag.PyBag_is_valid(self)

    def read(self, *args):
        return _cyber_bag.PyBag_read(self, *args)

    def register_message(self, desc):
        return _cyber_bag.PyBag_register_message(self, desc)

    def get_desc(self, name):
        return _cyber_bag.PyBag_get_desc(self, name)

    def set_desc(self, name, type, desc):
        return _cyber_bag.PyBag_set_desc(self, name, type, desc)

    def get_snapshot(self):
        return _cyber_bag.PyBag_get_snapshot(self)

    def set_snapshot(self, snapshot):
        return _cyber_bag.PyBag_set_snapshot(self, snapshot)

    def write(self, channel, data, data_type, timestamp=0):
        return _cyber_bag.PyBag_write(self, channel, data, data_type, timestamp)

    def get_message_count(self, *args):
        return _cyber_bag.PyBag_get_message_count(self, *args)

    def get_start_time(self, *args):
        return _cyber_bag.PyBag_get_start_time(self, *args)

    def is_active(self):
        return _cyber_bag.PyBag_is_active(self)

    def get_end_time(self, *args):
        return _cyber_bag.PyBag_get_end_time(self, *args)

    def get_file_size(self):
        return _cyber_bag.PyBag_get_file_size(self)

    def get_file_name(self):
        return _cyber_bag.PyBag_get_file_name(self)

    def get_channels(self):
        return _cyber_bag.PyBag_get_channels(self)

    def get_channel_type(self, channel):
        return _cyber_bag.PyBag_get_channel_type(self, channel)

    def get_version(self):
        return _cyber_bag.PyBag_get_version(self)

    def get_compress_type(self):
        return _cyber_bag.PyBag_get_compress_type(self)

    def close(self):
        return _cyber_bag.PyBag_close(self)


PyBag_swigregister = _cyber_bag.PyBag_swigregister
PyBag_swigregister(PyBag)

# This file is compatible with both classic and new-style classes.
