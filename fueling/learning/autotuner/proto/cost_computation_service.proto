syntax = "proto3";

package apollo.fuelation;

import "fueling/learning/autotuner/proto/dynamic_model_info.proto";
import "fueling/learning/autotuner/proto/git_info.proto";
import "fueling/learning/autotuner/proto/sim_service.proto";

service CostComputation {
  rpc Initialize(InitRequest) returns (InitResponse) {}
  rpc ComputeCost(ComputeRequest) returns (ComputeResponse) {}
  rpc Close(CloseRequest) returns (CloseResponse) {}
}

message ModelConfig {
  map<string, string> model_config =
      1;  // map from local config file path to serialized config
}

message InitRequest {
  GitInfo git_info = 1;
  repeated uint32 scenario_id = 2;
  DynamicModel dynamic_model = 3;
}

message InitResponse {
  Status status = 1;
  string token = 2;
}

message ComputeRequest {
  string token = 1;
  map<string, ModelConfig> config = 2;  // config_id -> model_config
  string cost_computation_conf_filename = 3;
}

message ComputeResponse {
  Status status = 1;
  map<string, float> score = 2;  // config_id -> weighted score
  string iteration_id = 3;
}

message CloseRequest {
  string token = 1;
}

message CloseResponse {
  Status status = 1;
}
