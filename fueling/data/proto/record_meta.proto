syntax = "proto2";

package apollo.data.fuel;

import "cyber/proto/record.proto";
import "modules/common/proto/drive_event.proto";
import "modules/common/proto/geometry.proto";
import "modules/dreamview/proto/hmi_status.proto";

// A disengagement is counted when DrivingMode changes from AUTO to EMERGENCY.
message Disengagement {
  optional double time = 1;
  optional apollo.common.PointLLH location = 2;
  optional string desc = 3;
}

// planning stat
message PlanningStat {
  message Latency {
    map<string, uint64> latency_hist = 1;
    optional uint64 max = 2;
    optional uint64 min = 3;
    optional uint64 avg = 4;
  }

  message Stability {
    message SpeedJerk {
      message JerkCnt {
        optional int32 jerk = 1;
        optional int32 cnt = 2;
      }
      optional int32 speed = 1;
      repeated JerkCnt jerk_cnt = 2;
    }
    repeated SpeedJerk speed_jerk = 1;
  }

  optional Latency latency = 1;
  optional Stability stability = 2;
}

message ModuleStat {
  message Values {
    repeated float values = 1;
  }
  map<string, Values> fields = 1;
}

// Rich metadata for a Cyber record, which contains useful information for
// warehousing needs.
message RecordMeta {
  // The input record to generate this proto.
  optional string path = 1;
  // Generally the records in the same dir are recorded continuously.
  optional string dir = 2;

  // Get from RecordReader.get_headerstring(). Some useful fields are:
  //   header.begin_time
  //   header.end_time
  //   header.size
  optional apollo.cyber.proto.Header header = 3;
  // Get from RecordReader.get_channellist() and get_messagenumber().
  map<string, uint64> channels = 4;

  // Get from the first hmi_status message.  Some useful fields are:
  //   hmi_status.current_mode
  //   hmi_status.current_map
  //   hmi_status.current_vehicle
  optional apollo.dreamview.HMIStatus hmi_status = 5;

  repeated Disengagement disengagements = 6;

  // DriveEvent is an incident recorded by CarOps.
  repeated apollo.common.DriveEvent drive_events = 7;

  message Stat {
    // Mileage stat by driving mode: {canbus.Chassis.DrivingMode : meters}.
    map<string, float> mileages = 1;

    // A downsampled position point list which forms a driving path.
    repeated apollo.common.PointLLH driving_path = 2;

    optional PlanningStat planning_stat = 3 [deprecated = true];

    // General metrics stat, for example:
    // {
    //   "planning" : fields {
    //     "latency": {values: [0.11, 0.12, 0.1, ...]},
    //   },
    //   "control" : fields {
    //     "lateral_error": {values: [0.11, 0.12, 0.1, ...]},
    //     "speed_error": {values: [0.11, 0.12, 0.1, ...]},
    //   },
    // }
    // Please try to make the field keys more structured and readable, such as "A.B.C".
    map<string, ModuleStat> module_stats = 4;
  }
  optional Stat stat = 8;
}
